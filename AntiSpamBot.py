import os
import re
import logging
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv

# –ó–∞–º–µ–Ω–∞ –¥–ª—è imghdr –≤ Python 3.13+
import mimetypes

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logger.error("BOT_TOKEN environment variable is not set!")
    raise ValueError("BOT_TOKEN environment variable is not set!")

# –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–ø–∞–º–∞
SPAM_PATTERNS = [
    # –°—Å—ã–ª–∫–∏ –∏ –¥–æ–º–µ–Ω—ã
    r"https?://",
    r"www\.",
    r"\.(com|ru|org|net|info|bot|me|xyz|shop|online)/?",
    r"t\.me/",
    r"@[a-zA-Z0-9_]{5,}",

    # –†–∞–±–æ—Ç–∞ –∏ –∑–∞—Ä–∞–±–æ—Ç–æ–∫
    r"–ø–æ–¥—Ä–∞–±–æ—Ç–∫",
    r"–∑–∞—Ä–∞–±–æ—Ç–æ–∫",
    r"–∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å",
    r"–≤–∞–∫–∞–Ω—Å–∏",
    r"—Ä–∞–±–æ—Ç[–∞—ã—É]",
    r"—Ä–∞–±–æ—Ç–∞—Ç—å",
    r"–∑–∞—Ä–ø–ª–∞—Ç–∞",
    r"–¥–æ—Ö–æ–¥",
    r"–∫–∞—Ä—å–µ—Ä",

    # –ü—Ä–∏–∑—ã–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é
    r"–ø–∏—à–∏\s*(–≤?\s*(–ª—Å|–ª–∏—á–∫—É|–ª–∏—á–Ω—ã–µ|–ø–º|pm|dm))",
    r"–æ–±—Ä–∞—â–∞–π—Å—è",
    r"–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å",
    r"–Ω–∞–ø–∏—à–∏",
    r"–Ω–∞–ø–∏—à–∏—Ç–µ",
    r"—Å–≤—è–∂–∏—Å—å",
    r"—Å–≤—è–∂–∏—Ç–µ—Å—å",
    r"–∑–≤–æ–Ω–∏",
    r"–∑–≤–æ–Ω–∏—Ç–µ",
    r"–∑–≤–æ–Ω–æ–∫",

    # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Å—Ö–µ–º—ã
    r"–∏–Ω–≤–µ—Å—Ç",
    r"–±–∏–∑–Ω–µ—Å",
    r"–ø–∞—Ä—Ç–Ω–µ—Ä",
    r"—Ñ—Ä–∞–Ω—à–∏–∑",
    r"–∫—Ä–∏–ø—Ç",
    r"–±–∏—Ç–∫–æ–∏–Ω",
    r"bitcoin",
    r"–±–ª–æ–∫—á–µ–π–Ω",

    # –ë—ã—Å—Ç—Ä—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫
    r"–±—ã—Å—Ç—Ä—ã[–µ–π]? –¥–µ–Ω—å–≥–∏",
    r"–ª–µ–≥–∫[–∞–æ–∏]? –∑–∞—Ä–∞–±–æ—Ç–æ–∫",
    r"–Ω–∞ –¥–æ–º—É",
    r"—É–¥–∞–ª–µ–Ω–Ω",
    r"—É–¥–∞–ª—ë–Ω–Ω",
    r"–æ–Ω–ª–∞–π–Ω",

    # –ù–∞–±–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    r"–Ω–∞–±–æ—Ä.*(—Å–æ—Ç—Ä—É–¥–Ω–∏–∫|–ø–µ—Ä—Å–æ–Ω–∞–ª|—Ä–∞–±–æ—Ç–Ω–∏–∫)",
    r"—Ç—Ä–µ–±—É—é—Ç—Å—è",
    r"—Ç—Ä–µ–±—É–µ—Ç—Å—è",
    r"–∏—â–µ–º.*(—Å–æ—Ç—Ä—É–¥–Ω–∏–∫|—Ä–∞–±–æ—Ç–Ω–∏–∫)",

    # –ö–æ–Ω—Ç–∞–∫—Ç—ã
    r"\+?\d{10,}",  # —Ç–µ–ª–µ—Ñ–æ–Ω—ã
    r"@\w{5,}",  # —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
    r"–∫–æ–Ω—Ç–∞–∫—Ç",
    r"—Ç–µ–ª–µ—Ñ–æ–Ω",
    r"whatsapp",
    r"–≤–∞–π–±–µ—Ä",
    r"viber",
    r"telegram",

    # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    r"–±–µ—Å–ø–ª–∞—Ç–Ω–æ",
    r"–±–æ–Ω—É—Å",
    r"–∞–∫—Ü–∏",
    r"—Å–∫–∏–¥–∫",
    r"–≤—ã–≥–æ–¥–Ω",
    r"–ø—Ä–µ–¥–ª–æ–∂–µ–Ω",

    # –°–µ—Ç–µ–≤–æ–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥
    r"–º–ª–º",
    r"—Å–µ—Ç–µ–≤–æ–π",
    r"–º–∞—Ä–∫–µ—Ç–∏–Ω–≥",

    # –î–µ–Ω—å–≥–∏ –∏ —Å—É–º–º—ã
    r"8000",
    r"8\s*000",  # 8 000
    r"8,000",
    r"8–∫",
    r"8\s*[–∫k]",
    r"8\s*—Ç—ã—Å",
    r"–Ω–∞\s+—Ä—É–∫–∏",  # "–Ω–∞ —Ä—É–∫–∏"
    r"–∑–∞—Ä–∞–±–æ—Ç–æ–∫",
    r"–∑–∞—Ä–∞–±–æ—Ç–æ–∫",  # —Å –æ–ø–µ—á–∞—Ç–∫–æ–π
    r"–¥–µ–Ω—å–≥–∏",
    r"–≤—ã–ø–ª–∞—Ç",
    r"–ø–æ–ª—É—á–∞–µ—à—å",

    # –í—Ä–µ–º—è –∏ –ø—Ä–æ—Å—Ç–æ—Ç–∞
    r"–∑–∞\s*4\s*—á–∞—Å",  # –∑–∞ 4 —á–∞—Å(–∞)
    r"–∑–∞\s*—á–µ—Ç—ã—Ä–µ\s*—á–∞—Å",
    r"–Ω–µ—Å–∫–æ–ª—å–∫–æ\s*–¥–Ω–µ–π",
    r"–Ω–∞\s+–Ω–µ—Å–∫–æ–ª—å–∫–æ\s+–¥–Ω–µ–π",
    r"–ø—Ä–æ—Å—Ç–æ–π",
    r"–ø—Ä–æ—Å—Ç–∞—è",
    r"–ø—Ä–æ—â–µ\s+–ø—Ä–æ—Å—Ç–æ–≥–æ",
    r"–ª–µ–≥–∫",
    r"–±—ã—Å—Ç—Ä",
    r"–∑–∞\s*–¥–µ–Ω—å",

    # –ü–æ–∏—Å–∫ –ª—é–¥–µ–π
    r"–Ω—É–∂–Ω—ã\s+–ª—é–¥–∏",
    r"—Ç—Ä–µ–±—É—é—Ç—Å—è",
    r"–∏—â–µ–º",
    r"–¥–ª—è\s+—Ä–∞–±–æ—Ç—ã",
    r"—É–¥–∞–ª–µ–Ω–Ω",  # —É–¥–∞–ª–µ–Ω–Ω–æ, —É–¥–∞–ª–µ–Ω–Ω–∞—è
    r"—É–¥–∞–ª–µ–Ω–∫",

    # –ü—Ä–æ—á–µ–µ
    r"–ø–æ–¥—Ä–∞–±–æ—Ç–∫",
    r"–±–µ–∑\s+–≤–ª–æ–∂–µ–Ω–∏–π",
    r"–±–µ–∑\s+–æ–ø—ã—Ç–∞",
    r"–≤\s+—Å–≤–æ–±–æ–¥–Ω–æ–µ\s+–≤—Ä–µ–º—è",
]

# –í—Ä–µ–º—è –≤ —Ç–µ—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –Ω–æ–≤—ã–º (24 —á–∞—Å–∞)
NEW_USER_TIME = timedelta(hours=24)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_join_times = {}


class AntiSpamBot:
    def __init__(self):
        self.compiled_patterns = [re.compile(pattern, re.IGNORECASE) for pattern in SPAM_PATTERNS]

    def is_spam(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–ø–∞–º-–ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        if not text:
            return False

        text_lower = text.lower()

        # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        spam_keywords = ["http", "www", ".com", ".ru", ".org", "@", "t.me", "–ø–æ–¥—Ä–∞–±–æ—Ç", "–∑–∞—Ä–∞–±–æ—Ç", "+ –ª—Å", "–ø–∏—à–∏",
                         "–Ω–∞–±–æ—Ä"]
        if any(keyword in text_lower for keyword in spam_keywords):
            return True

        # –ì–ª—É–±–æ–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ regex –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
        for pattern in self.compiled_patterns:
            if pattern.search(text):
                return True

        return False

    def is_new_user(self, chat_id: int, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–º"""
        join_time = user_join_times.get((chat_id, user_id))
        if not join_time:
            return False

        return datetime.now() - join_time < NEW_USER_TIME

    async def track_user_join(self, chat_id: int, user_id: int):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_join_times[(chat_id, user_id)] = datetime.now()
        logger.info(f"User {user_id} joined chat {chat_id}")


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
antispam_bot = AntiSpamBot()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        await update.message.reply_text(
            "üö´ –ê–Ω—Ç–∏—Å–ø–∞–º-–±–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø—Ä–∞–≤–∞–º–∏:\n"
            "‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
            "–Ø –±—É–¥—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—Ç—å —Å–ø–∞–º!"
        )
        logger.info("Start command received")
    except Exception as e:
        logger.error(f"Error in start command: {e}")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        message = update.message
        if not message or not message.from_user:
            return

        chat_id = message.chat_id
        user_id = message.from_user.id
        text = message.text or message.caption or ""

        # –î–õ–Ø –û–¢–õ–ê–î–ö–ò
        print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{text}'")
        print(f"–°–ø–∞–º? {antispam_bot.is_spam(text)}")

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –±–æ—Ç–æ–≤
        if message.from_user.is_bot:
            return

        # –ü–†–û–í–ï–†–Ø–ï–ú –ù–ê –°–ü–ê–ú (–ë–ï–ó –ü–†–û–í–ï–†–ö–ò –ù–ê –ù–û–í–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø)
        if antispam_bot.is_spam(text):
            print("–£–¥–∞–ª—è–µ–º —Å–ø–∞–º!")  # –î–õ–Ø –û–¢–õ–ê–î–ö–ò
            try:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await message.delete()
                logger.info(f"Deleted spam message from user {user_id} in chat {chat_id}")

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")  # –î–õ–Ø –û–¢–õ–ê–î–ö–ò
                logger.error(f"Failed to delete message: {e}")

    except Exception as e:
        logger.error(f"Error in handle_message: {e}")


async def handle_new_members(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    try:
        chat_id = update.message.chat_id

        for member in update.message.new_chat_members:
            if not member.is_bot:  # –ù–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –±–æ—Ç–æ–≤
                await antispam_bot.track_user_join(chat_id, member.id)

        logger.info(f"New members joined chat {chat_id}")

    except Exception as e:
        logger.error(f"Error in handle_new_members: {e}")


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Exception while handling an update: {context.error}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(BOT_TOKEN).build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        application.add_handler(MessageHandler(filters.CAPTION, handle_message))
        application.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, handle_new_members))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        print("ü§ñ –ê–Ω—Ç–∏—Å–ø–∞–º-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        print("üìç –¢–æ–∫–µ–Ω:", BOT_TOKEN[:10] + "..." if BOT_TOKEN else "Not set")
        print("‚è∞ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", NEW_USER_TIME)

        application.run_polling(
            drop_pending_updates=True,
            allowed_updates=Update.ALL_TYPES
        )

    except Exception as e:
        logger.critical(f"Failed to start bot: {e}")
        raise


if __name__ == "__main__":
    main()