import os
import re
import logging
import threading
import time
from datetime import datetime, timedelta
from http.server import HTTPServer, BaseHTTPRequestHandler
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv


# === HEALTH CHECK –°–ï–†–í–ï–† –î–õ–Ø KOYEB === #
class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b'OK')

    def log_message(self, format, *args):
        # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ health check –∑–∞–ø—Ä–æ—Å–æ–≤
        return


def run_health_server():
    """–ó–∞–ø—É—Å–∫ health check —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    try:
        server = HTTPServer(('0.0.0.0', 8000), HealthHandler)
        print("üåê Health server –∑–∞–ø—É—â–µ–Ω –Ω–∞ 0.0.0.0:8000")
        server.timeout = 1  # –¢–∞–π–º–∞—É—Ç –¥–ª—è —á–∞—Å—Ç–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã—Ö–æ–¥–∞
        while True:
            server.handle_request()
            time.sleep(1)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ health server: {e}")


# –ó–∞–ø—É—Å–∫–∞–µ–º health server —Ç–æ–ª—å–∫–æ –≤ –≤–µ–±-—Å—Ä–µ–¥–µ
if os.environ.get('KOYEB') or os.environ.get('WEB_ENV'):
    try:
        health_thread = threading.Thread(target=run_health_server, daemon=True)
        health_thread.start()
        print("‚úÖ Health server –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å health server: {e}")

# === –ö–û–ù–ï–¶ HEALTH CHECK –°–ï–†–í–ï–†–ê === #

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logger.error("BOT_TOKEN environment variable is not set!")
    raise ValueError("BOT_TOKEN environment variable is not set!")

# ID –≤–ª–∞–¥–µ–ª—å—Ü–∞
OWNER_IDS = [1263482853]

# ID –∫–∞–Ω–∞–ª–∞, —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª—è—Ç—å
CHANNEL_ID = -1002207248459

# –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–ø–∞–º–∞
SPAM_PATTERNS = [
    r"https?://", r"www\.", r"\.(com|ru|org|net|info|bot|me)/?", r"t\.me/", r"@[a-zA-Z0-9_]{5,}",
    r"–ø–æ–¥—Ä–∞–±–æ—Ç–∫", r"–∑–∞—Ä–∞–±–æ—Ç–æ–∫", r"–∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å", r"–≤–∞–∫–∞–Ω—Å–∏", r"—Ä–∞–±–æ—Ç[–∞—ã—É]", r"—Ä–∞–±–æ—Ç–∞—Ç—å",
    r"–ø–∏—à–∏\s*(–≤?\s*(–ª—Å|–ª–∏—á–∫—É|–ª–∏—á–Ω—ã–µ|–ø–º|pm|dm))", r"–æ–±—Ä–∞—â–∞–π—Å—è", r"–Ω–∞–ø–∏—à–∏", r"—Å–≤—è–∂–∏—Å—å",
    r"–∏–Ω–≤–µ—Å—Ç", r"–±–∏–∑–Ω–µ—Å", r"–ø–∞—Ä—Ç–Ω–µ—Ä", r"—Ñ—Ä–∞–Ω—à–∏–∑", r"–∫—Ä–∏–ø—Ç", r"–±–∏—Ç–∫–æ–∏–Ω",
    r"–±—ã—Å—Ç—Ä—ã[–µ–π]? –¥–µ–Ω—å–≥–∏", r"–ª–µ–≥–∫[–∞–æ–∏]? –∑–∞—Ä–∞–±–æ—Ç–æ–∫", r"–Ω–∞ –¥–æ–º—É", r"—É–¥–∞–ª–µ–Ω–Ω", r"—É–¥–∞–ª—ë–Ω–Ω",
    r"–Ω–∞–±–æ—Ä.*(—Å–æ—Ç—Ä—É–¥–Ω–∏–∫|–ø–µ—Ä—Å–æ–Ω–∞–ª|—Ä–∞–±–æ—Ç–Ω–∏–∫)", r"—Ç—Ä–µ–±—É—é—Ç—Å—è", r"—Ç—Ä–µ–±—É–µ—Ç—Å—è",
    r"\+?\d{10,}", r"@\w{5,}", r"–∫–æ–Ω—Ç–∞–∫—Ç", r"—Ç–µ–ª–µ—Ñ–æ–Ω", r"whatsapp", r"–≤–∞–π–±–µ—Ä",
    r"–±–µ—Å–ø–ª–∞—Ç–Ω–æ", r"–±–æ–Ω—É—Å", r"–∞–∫—Ü–∏", r"—Å–∫–∏–¥–∫", r"–≤—ã–≥–æ–¥–Ω", r"–ø—Ä–µ–¥–ª–æ–∂–µ–Ω",
    r"–º–ª–º", r"—Å–µ—Ç–µ–≤–æ–π", r"–º–∞—Ä–∫–µ—Ç–∏–Ω–≥", r"8000", r"8\s*000", r"8–∫", r"8\s*[–∫k]",
    r"–¥–µ–Ω—å–≥–∏", r"–≤—ã–ø–ª–∞—Ç", r"–ø–æ–ª—É—á–∞–µ—à—å", r"–∑–∞\s*4\s*—á–∞—Å", r"–Ω–µ—Å–∫–æ–ª—å–∫–æ\s*–¥–Ω–µ–π",
    r"–Ω—É–∂–Ω—ã\s+–ª—é–¥–∏", r"—Ç—Ä–µ–±—É—é—Ç—Å—è", r"–∏—â–µ–º", r"–¥–ª—è\s+—Ä–∞–±–æ—Ç—ã", r"—É–¥–∞–ª–µ–Ω–Ω",
    r"–ø–æ–¥—Ä–∞–±–æ—Ç–∫", r"–±–µ–∑\s+–≤–ª–æ–∂–µ–Ω–∏–π", r"–±–µ–∑\s+–æ–ø—ã—Ç–∞", r"–≤\s+—Å–≤–æ–±–æ–¥–Ω–æ–µ\s+–≤—Ä–µ–º—è"
]

# –í—Ä–µ–º—è –≤ —Ç–µ—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –Ω–æ–≤—ã–º (24 —á–∞—Å–∞)
NEW_USER_TIME = timedelta(hours=24)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_join_times = {}


class AntiSpamBot:
    def __init__(self):
        self.compiled_patterns = [re.compile(pattern, re.IGNORECASE) for pattern in SPAM_PATTERNS]

    def is_spam(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–ø–∞–º-–ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        if not text:
            return False

        text_lower = text.lower()
        spam_keywords = ["http", "www", ".com", ".ru", ".org", "@", "t.me", "–ø–æ–¥—Ä–∞–±–æ—Ç", "–∑–∞—Ä–∞–±–æ—Ç", "+ –ª—Å", "–ø–∏—à–∏",
                         "–Ω–∞–±–æ—Ä"]

        if any(keyword in text_lower for keyword in spam_keywords):
            return True

        for pattern in self.compiled_patterns:
            if pattern.search(text):
                return True

        return False

    def is_new_user(self, chat_id: int, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–º"""
        join_time = user_join_times.get((chat_id, user_id))
        if not join_time:
            return False
        return datetime.now() - join_time < NEW_USER_TIME

    async def track_user_join(self, chat_id: int, user_id: int):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_join_times[(chat_id, user_id)] = datetime.now()
        logger.info(f"User {user_id} joined chat {chat_id}")

    async def is_admin_or_owner(self, message, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º"""
        try:
            user_id = message.from_user.id

            if user_id in OWNER_IDS:
                logger.info(f"üëë –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞: {message.from_user.first_name}")
                return True

            chat_member = await context.bot.get_chat_member(message.chat.id, user_id)
            if chat_member.status in ['creator', 'administrator']:
                logger.info(f"üëë –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {message.from_user.first_name}")
                return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {e}")
        return False


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
antispam_bot = AntiSpamBot()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        await update.message.reply_text(
            "üö´ –ê–Ω—Ç–∏—Å–ø–∞–º-–±–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø—Ä–∞–≤–∞–º–∏:\n"
            "‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
            "–Ø –±—É–¥—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—Ç—å —Å–ø–∞–º!"
        )
        logger.info("Start command received")
    except Exception as e:
        logger.error(f"Error in start command: {e}")


async def myid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = update.message.from_user.id
        await update.message.reply_text(f"üÜî –í–∞—à ID: `{user_id}`", parse_mode='Markdown')
        logger.info(f"User {user_id} requested their ID")
    except Exception as e:
        logger.error(f"Error in myid command: {e}")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        message = update.message
        if not message or not message.from_user:
            return

        chat_id = message.chat_id
        user_id = message.from_user.id
        text = message.text or message.caption or ""

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
        if message.from_user.is_bot:
            return

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
        if message.forward_from_chat and message.forward_from_chat.id == CHANNEL_ID:
            logger.info(f"üì¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ {CHANNEL_ID}")
            return

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–∞–º–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        if user_id == CHANNEL_ID:
            logger.info(f"üì¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ –ø—Ä—è–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–∞–Ω–∞–ª–∞ {CHANNEL_ID}")
            return

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        if await antispam_bot.is_admin_or_owner(message, context):
            logger.info(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞/–≤–ª–∞–¥–µ–ª—å—Ü–∞: {user_id}")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–∞–º
        if antispam_bot.is_spam(text):
            try:
                await message.delete()
                logger.info(f"Deleted spam message from user {user_id} in chat {chat_id}")
            except Exception as e:
                logger.error(f"Failed to delete message: {e}")

    except Exception as e:
        logger.error(f"Error in handle_message: {e}")


async def handle_new_members(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    try:
        chat_id = update.message.chat_id
        for member in update.message.new_chat_members:
            if not member.is_bot:
                await antispam_bot.track_user_join(chat_id, member.id)
        logger.info(f"New members joined chat {chat_id}")
    except Exception as e:
        logger.error(f"Error in handle_new_members: {e}")


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Exception while handling an update: {context.error}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        application = Application.builder().token(BOT_TOKEN).build()

        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("myid", myid))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        application.add_handler(MessageHandler(filters.CAPTION, handle_message))
        application.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, handle_new_members))
        application.add_error_handler(error_handler)

        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        print("ü§ñ –ê–Ω—Ç–∏—Å–ø–∞–º-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        print("üìç –¢–æ–∫–µ–Ω:", BOT_TOKEN[:10] + "..." if BOT_TOKEN else "Not set")
        print("üëë ID –≤–ª–∞–¥–µ–ª—å—Ü–∞:", OWNER_IDS)
        print("üì¢ –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª:", CHANNEL_ID)

        application.run_polling(drop_pending_updates=True)

    except Exception as e:
        logger.critical(f"Failed to start bot: {e}")
        raise


if __name__ == "__main__":
    main()